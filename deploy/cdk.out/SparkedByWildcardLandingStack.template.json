{
 "Resources": {
  "UserContentBucket28BD072F": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "sparkedby-user-files",
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": false,
     "BlockPublicPolicy": false,
     "IgnorePublicAcls": false,
     "RestrictPublicBuckets": false
    },
    "WebsiteConfiguration": {
     "ErrorDocument": "index.html",
     "IndexDocument": "index.html"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "SparkedByWildcardLandingStack/UserContentBucket/Resource"
   }
  },
  "UserContentBucketPolicyA0CD8510": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "UserContentBucket28BD072F"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": {
        "AWS": "*"
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "UserContentBucket28BD072F",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SparkedByWildcardLandingStack/UserContentBucket/Policy/Resource"
   }
  },
  "SubdomainPathFunction2CA409C6": {
   "Type": "AWS::CloudFront::Function",
   "Properties": {
    "AutoPublish": true,
    "FunctionCode": "\n        function handler(event) {\n          var request = event.request;\n          var host = request.headers.host.value;\n          \n          // Extract the subdomain from the host header\n          var subdomain = host.split('.')[0];\n          \n          // Add subdomain to beginning of path if there's a path\n          if (request.uri === '/') {\n            request.uri = '/' + subdomain + '/index.html';\n          } else if (!request.uri.startsWith('/' + subdomain + '/')) {\n            request.uri = '/' + subdomain + request.uri;\n          }\n          \n          return request;\n        }\n      ",
    "FunctionConfig": {
     "Comment": "us-east-2SparkedByWildcarmainPathFunction97DB999E",
     "Runtime": "cloudfront-js-1.0"
    },
    "Name": "us-east-2SparkedByWildcarmainPathFunction97DB999E"
   },
   "Metadata": {
    "aws:cdk:path": "SparkedByWildcardLandingStack/SubdomainPathFunction/Resource"
   }
  },
  "NoCachePolicy1F71EC46": {
   "Type": "AWS::CloudFront::CachePolicy",
   "Properties": {
    "CachePolicyConfig": {
     "Comment": "No caching for rapid development iterations",
     "DefaultTTL": 0,
     "MaxTTL": 1,
     "MinTTL": 0,
     "Name": "SparkedByWildcardLandingStackNoCachePolicy9130564F-us-east-2",
     "ParametersInCacheKeyAndForwardedToOrigin": {
      "CookiesConfig": {
       "CookieBehavior": "none"
      },
      "EnableAcceptEncodingBrotli": true,
      "EnableAcceptEncodingGzip": true,
      "HeadersConfig": {
       "HeaderBehavior": "whitelist",
       "Headers": [
        "Origin"
       ]
      },
      "QueryStringsConfig": {
       "QueryStringBehavior": "none"
      }
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "SparkedByWildcardLandingStack/NoCachePolicy/Resource"
   }
  },
  "WildcardDistributionE15430E1": {
   "Type": "AWS::CloudFront::Distribution",
   "Properties": {
    "DistributionConfig": {
     "Aliases": [
      "*.sparkedby.app"
     ],
     "CustomErrorResponses": [
      {
       "ErrorCachingMinTTL": 600,
       "ErrorCode": 403,
       "ResponseCode": 200,
       "ResponsePagePath": "/index.html"
      },
      {
       "ErrorCachingMinTTL": 600,
       "ErrorCode": 404,
       "ResponseCode": 200,
       "ResponsePagePath": "/index.html"
      }
     ],
     "DefaultCacheBehavior": {
      "AllowedMethods": [
       "GET",
       "HEAD",
       "OPTIONS"
      ],
      "CachePolicyId": {
       "Ref": "NoCachePolicy1F71EC46"
      },
      "Compress": true,
      "FunctionAssociations": [
       {
        "EventType": "viewer-request",
        "FunctionARN": {
         "Fn::GetAtt": [
          "SubdomainPathFunction2CA409C6",
          "FunctionARN"
         ]
        }
       }
      ],
      "TargetOriginId": "SparkedByWildcardLandingStackWildcardDistributionOrigin1E299A568",
      "ViewerProtocolPolicy": "redirect-to-https"
     },
     "DefaultRootObject": "index.html",
     "Enabled": true,
     "HttpVersion": "http2",
     "IPV6Enabled": true,
     "Origins": [
      {
       "CustomOriginConfig": {
        "OriginProtocolPolicy": "http-only",
        "OriginSSLProtocols": [
         "TLSv1.2"
        ]
       },
       "DomainName": {
        "Fn::Select": [
         2,
         {
          "Fn::Split": [
           "/",
           {
            "Fn::GetAtt": [
             "UserContentBucket28BD072F",
             "WebsiteURL"
            ]
           }
          ]
         }
        ]
       },
       "Id": "SparkedByWildcardLandingStackWildcardDistributionOrigin1E299A568"
      }
     ],
     "PriceClass": "PriceClass_100",
     "ViewerCertificate": {
      "AcmCertificateArn": "arn:aws:acm:us-east-1:302263086944:certificate/0893128a-ab57-440a-b133-3a663913c5c8",
      "MinimumProtocolVersion": "TLSv1.2_2021",
      "SslSupportMethod": "sni-only"
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "SparkedByWildcardLandingStack/WildcardDistribution/Resource"
   }
  },
  "WildcardRecordF8489308": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
    "AliasTarget": {
     "DNSName": {
      "Fn::GetAtt": [
       "WildcardDistributionE15430E1",
       "DomainName"
      ]
     },
     "HostedZoneId": {
      "Fn::FindInMap": [
       "AWSCloudFrontPartitionHostedZoneIdMap",
       {
        "Ref": "AWS::Partition"
       },
       "zoneId"
      ]
     }
    },
    "HostedZoneId": "Z03642041RUIUCIHW4W1W",
    "Name": "*.sparkedby.app.",
    "Type": "A"
   },
   "Metadata": {
    "aws:cdk:path": "SparkedByWildcardLandingStack/WildcardRecord/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/02LwW7CMBBEv4W7s0CAQ4/QqjcECh+AzGahS4Id2bsgZPnfUZSicJr3RjMlzL9WMJvYRyywboqWT5AOYrExFUWvAcnYRzymuIC0UWxIzPfZ/dMQe98yPsd68Gyw9Vqfg3cC6VcdCnvXr0a2+Efj+1N/OErgk74/n55N8Cq0WkBaV4Q+1P1ioANJzr1ubdexu/S4U+lUsnG+JrjG6b0sYb6E2eQamYugTvhGUA35AgQRaskRAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "SparkedByWildcardLandingStack/CDKMetadata/Default"
   }
  }
 },
 "Mappings": {
  "AWSCloudFrontPartitionHostedZoneIdMap": {
   "aws": {
    "zoneId": "Z2FDTNDATAQYW2"
   },
   "aws-cn": {
    "zoneId": "Z3RFFRIM2A3IF5"
   }
  }
 },
 "Outputs": {
  "DistributionId": {
   "Description": "The ID of the wildcard CloudFront distribution",
   "Value": {
    "Ref": "WildcardDistributionE15430E1"
   }
  },
  "DeploymentInstructions": {
   "Description": "Instructions for deploying new client sites",
   "Value": "To deploy a new client site:\n      1. Create an S3 bucket named: CLIENT_NAME-sparkedby-app\n      2. Configure it for website hosting with index.html as index and error document\n      3. Upload your static files\n      4. Site will be available at CLIENT_NAME.sparkedby.app"
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}